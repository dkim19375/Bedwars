//file:noinspection SpellCheckingInspection
plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'
    id 'net.minecrell.licenser' version '0.4.1'
}

final def basePackage = 'me.dkim19375.bedwars.libs'
final def annotationsPackage = "${basePackage}.annotations"

shadowJar {
    relocate("kotlin", "${basePackage}.kotlin")
    relocate("reactor", "${basePackage}.reactor")
    relocate("net.kyori", "${basePackage}.kyori")
    relocate("javassist", "${basePackage}.javassist")
    relocate("com.google.gson", "${basePackage}.gson")
    relocate("org.yaml.snakeyaml", "${basePackage}.snakeyaml")
    relocate("dev.triumphteam.gui", "${basePackage}.triumphgui")
    relocate("me.dkim19375.dkimcore", "${basePackage}.dkimcore")
    relocate("de.tr7zw.changeme.nbtapi", "${basePackage}.nbtapi")
    relocate("de.tr7zw.nbtinjector", "${basePackage}.nbtinjector")
    relocate("org.apache.commons.io", "${basePackage}.commons.io")
    relocate("de.tr7zw.annotations", "${annotationsPackage}.tr7zw")
    relocate("org.reactivestreams", "${basePackage}.reactivestreams")
    relocate("me.tigerhix.lib.scoreboard", "${basePackage}.scoreboard")
    relocate("me.katsumag.itemactionslib", "${basePackage}.itemactionslib")
    relocate("me.dkim19375.dkimbukkitcore", "${basePackage}.dkimbukkitcore")
    relocate("org.jetbrains.annotations", "${annotationsPackage}.jetbrains")
    relocate("org.intellij.lang.annotations", "${annotationsPackage}.intellij")
    relocate("me.dkim19375.itemmovedetectionlib", "${basePackage}.itemmovedetectionlib")
}

static def addRepositories(Project project) {
    project.repositories {
        mavenCentral()
        maven { url = 'https://jitpack.io' }
        maven { url = 'https://repo.alessiodp.com/releases/' }
        maven { url = 'https://repo.essentialsx.net/releases/' }
        maven { url = 'https://repo.essentialsx.net/snapshots/' }
        maven { url = 'https://repo.mattstudios.me/artifactory/public' }
        maven { url = 'https://repo.codemc.org/repository/maven-public/' }
        maven { url = 'https://repo.dmulloy2.net/nexus/repository/public/' }
        maven { url = 'https://repo.onarandombox.com/content/groups/public/' }
        maven { url = 'https://nexus.hc.to/content/repositories/pub_releases/' }
        maven { url = 'https://oss.sonatype.org/content/repositories/releases/' }
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url = 'https://s01.oss.sonatype.org/content/repositories/releases/' }
        maven { url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
        maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        flatDir {
            dirs 'libs'
        }
    }
}

repositories {
    addRepositories(project)
}

dependencies {
    for (Project project : subprojects) {
        implementation project
    }
}

//noinspection GroovyUnusedAssignment
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding 'UTF-8'

group 'me.dkim19375'
version '1.0.0'

subprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'net.minecrell.licenser'

    group = parent.group
    version = parent.version

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

    //noinspection GroovyAssignabilityCheck
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    compileKotlin {
        //noinspection GrUnresolvedAccess
        kotlinOptions.jvmTarget = '1.8'
    }

    license {
        header = rootProject.file 'HEADER'
        include '**/*.kt'
        exclude '**/DefaultFontInfo.kt'
    }

    repositories {
        addRepositories(project)
        maven {
            url 'https://repo.maven.apache.org/maven2'
            name 'Maven Central'
        }
    }

    dependencies {
        implementation 'de.tr7zw:item-nbt-api:2.8.0'
        implementation 'de.tr7zw:nbt-injector:2.8.0'
        implementation 'commons-io:commons-io:2.11.0'
        implementation 'net.kyori:adventure-api:4.8.1'
        implementation 'org.jetbrains:annotations:22.0.0'
        implementation 'dev.triumphteam:triumph-gui:3.0.3'
        implementation 'io.github.dkim19375:dkim-bukkit-core:3.2.1'
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.5.21'
        implementation 'net.kyori:adventure-text-serializer-gson:4.8.1'
        implementation 'net.kyori:adventure-text-serializer-legacy:4.8.1'
        implementation 'io.github.dkim19375:item-move-detection-lib:1.1.1'
        implementation 'net.kyori:adventure-platform-bukkit:4.0.0-SNAPSHOT'


        compileOnly('com.onarandombox.multiversecore:Multiverse-Core:2.5') {
            exclude group: 'org.mcstats.bukkit'
            exclude group: 'org.spigotmc'
            exclude group: 'org.bukkit'
            exclude group: 'net.md-5'
        }

        compileOnly 'com.comphenix.protocol:ProtocolLib:4.6.0'
        compileOnly('com.alessiodp.parties:parties-api:3.1.8') {
            exclude group: 'org.spigotmc'
            exclude group: 'org.bukkit'
            exclude group: 'net.md-5'
        }
        implementation fileTree('../libs')
        // https://github.com/katsumag/ItemActionsLib
        // https://github.com/TigerHix/ScoreboardLib
    }
}

task removeBuildJars() {
    new File('build/libs').deleteDir()
}

task copyFile(type: Copy) {
    if (!new File('../.TestServers/1.8/plugins/').exists()) {
        return
    }
    new File('../.TestServers/1.8/plugins/' + project.name + '-' + project.version + '-all.jar').delete()
    from('build/libs/' + project.name + '-' + project.version + '-all.jar')
    into('../.TestServers/1.8/plugins')
    include('*.jar')
}

task copyFile_17(type: Copy) {
    if (!new File('../.TestServers/1.17/plugins/').exists()) {
        return
    }
    new File('../.TestServers/1.17/plugins/' + project.name + '-' + project.version + '-all.jar').delete()
    from('build/libs/' + project.name + '-' + project.version + '-all.jar')
    into('../.TestServers/1.17/plugins')
    include('*.jar')
}

task deleteAll() {
    for (File file : new File('../.TestServers/1.17/plugins').listFiles()) {
        if (file.name.startsWith(project.name)) {
            file.delete()
        }
    }
    for (File file : new File('../.TestServers/1.16/plugins').listFiles()) {
        if (file.name.startsWith(project.name)) {
            file.delete()
        }
    }
    for (File file : new File('../.TestServers/1.8/plugins').listFiles()) {
        if (file.name.startsWith(project.name)) {
            file.delete()
        }
    }
}

shadowJar.dependsOn licenseFormat